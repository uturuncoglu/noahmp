name: comptest

on:
  push:
    branches: [ feature/nuopc_cap_new ]
  pull_request:
    branches: [ feature/nuopc_cap_new ]
  # following is required to prevent auto-removing cache entries after 7-days
  # this only works on default branch
  schedule:
    - cron: '0 0 * * MON'
    - cron: '0 0 * * FRI'

jobs:
  create_environment:
    runs-on: ubuntu-latest
    
    env:
      # installation location for spack and other components
      INSTALL_DIR: $HOME/install

    steps:
      # checkout base repository
      - name: Checkout NoahMP Repository
        uses: actions/checkout@v3
        with:
          ref: feature/nuopc_cap_new

      # prepare core environment
      - name: Install Core Development Tools
        run: |
          sudo apt-get update
          sudo apt-get install unzip file gringo
          sudo apt-get install build-essential binutils-dev gfortran
          sudo apt-get install python3-dev python3-boto3 python3-yaml
          sudo apt-get install wget awscli ca-certificates

      # checkout spack to create build environment
      - name: Checkout Spack
        uses: actions/checkout@v3
        with:
          repository: uturuncoglu/spack
          path: spack
          ref: hotfix/esmf

      # create build environment
      - name: Concretize Spack Environment Using YAML Specification
        run: |
          . $GITHUB_WORKSPACE/spack/share/spack/setup-env.sh
          spack -e ${{ github.workspace }}/.spack concretize -f
          
      # restore build environment from cache
      - name: Restore Build Environment From Cache
        id: cache-spack
        uses: actions/cache@v3
        with:
          path: ~/.spack-ci
          key: spack-${{ hashFiles('**/spack.lock') }}
          restore-keys: |
            spack-
            
      # create build environment
      - name: Install Spack Packages
        if: steps.cache-spack.outputs.cache-hit != 'true'
        run: |
          . $GITHUB_WORKSPACE/spack/share/spack/setup-env.sh
          spack -e ${{ github.workspace }}/.spack install -j3
 
      # build and install component
      # need to install with openmp support since fms build with it
      # TODO: update fms in spack.yaml as fms~openmp to build it without openmp support 
      - name: Build and Install NoahMP
        run: |
          export PATH=$HOME/.spack-ci/view/bin:$PATH
          export ESMFMKFILE=$HOME/.spack-ci/view/lib/esmf.mk
          export NetCDF_ROOT=`nc-config --prefix`
          export FC=gfortran
          cd ${{ github.workspace }}
          mkdir build
          cd build
          cmake -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} -DOPENMP=ON ../
          make
          make install
          
      # checkout data models
      - name: Checkout CDEPS
        uses: actions/checkout@v3
        with:
          repository: uturuncoglu/CDEPS
          path: cdeps
          ref: hotfix/std_build      
      
      # build and install data models
      - name: Build and Install CDEPS
        run: |
          export PATH=$HOME/.spack-ci/view/bin:$PATH
          export ESMFMKFILE=$HOME/.spack-ci/view/lib/esmf.mk
          cd ${{ github.workspace }}/cdeps
          mkdir build
          cd build
          cmake -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} \
            -DPIO_C_LIBRARY=$HOME/.spack-ci/view/lib \
            -DPIO_C_INCLUDE_DIR=$HOME/.spack-ci/view/include \
            -DPIO_Fortran_LIBRARY=$HOME/.spack-ci/view/lib \
            -DPIO_Fortran_INCLUDE_DIR=$HOME/.spack-ci/view/include \
            -DCMAKE_Fortran_FLAGS="-ffree-line-length-none -ffixed-line-length-none" \
            -DDISABLE_FoX=ON ../
          make
          make install

      # checkout generic driver
      - name: Checkout Generic NUOPC Driver
        uses: actions/checkout@v3
        with:
          repository: uturuncoglu/GenericNUOPCDriver
          path: driver
          ref: main

      # build and install driver
      - name: Build and Install Generic NUOPC Driver
        run: |
          export PATH=$HOME/.spack-ci/view/bin:$PATH
          export ESMFMKFILE=$HOME/.spack-ci/view/lib/esmf.mk
          export NetCDF_ROOT=`nc-config --prefix`
          export ATM_LIB_DIR=${{ env.INSTALL_DIR }}/lib
          export ATM_INC_DIR=${{ env.INSTALL_DIR }}/include
          export LND_LIB_DIR=${{ env.INSTALL_DIR }}/lib
          export LND_INC_DIR=${{ env.INSTALL_DIR }}/mod
          export FC=mpif90
          cd ${{ github.workspace }}/driver
          cmake -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} \
            -DPIO_PREFIX=$HOME/.spack-ci/view .
          make
          make install
     
      # restore input files from cache
      - name: Restore Input Files From Cache
        id: cache-input
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/run/INPUT
          key: input-${{ hashFiles('**/file_checksum.lock') }}
          #restore-keys: |
          #  input-
            
      # download input files for components
      - name: Download Input Files
        if: steps.cache-input.outputs.cache-hit != 'true'
        run: |
          export PATH=$HOME/.spack-ci/view/bin:$PATH
          mkdir -p ${{ github.workspace }}/run/INPUT
          cd ${{ github.workspace }}/run/INPUT
          python3 ${{ github.workspace }}/driver/scripts/get_input.py --ifile ${{ github.workspace }}/driver/nuopc_drv.yaml

      # checkout configuration files and additional input files for noahmp
      - name: Checkout Generic NUOPC Driver
        uses: actions/checkout@v3
        with:
          repository: uturuncoglu/noahmp_data
          path: noahmp_data
          ref: main

      # checkout cime for ParamGen
      - name: Checkout CIME
        uses: actions/checkout@v3
        with:
          repository: uturuncoglu/cime
          path: cime
          ref: feature/paramgen_nuopc
          
      # build and install cime and generate config files
      - name: Build and Install CIME
        run: |
          cd ${{ github.workspace }}/cime
          python3 setup.py build
          python3 setup.py install --user install
          export PYTHONPATH=`find $HOME/.local/lib/. -name "CIME-*" | xargs dirname`:$PYTHONPATH
          echo $PYTHONPATH
          cd ${{ github.workspace }}/driver/scripts
          ls -al
          export INPUT_DIR='INPUT'
          export DATAMODE='CLMNCEP'
          export MODEL_MESHFILE='INPUT/fv1.9x2.5_141008_ESMFmesh.nc'
          export MODEL_MASKFILE='INPUT/fv1.9x2.5_141008_ESMFmesh.nc'
          export NX_GLOBAL=144
          export NY_GLOBAL=96
          python3 gen_config.py --ifile ../nuopc_drv.yaml
          
      # get configuration files
      - name: Move Configuration Files to Input Directory
        run: |
          export PATH=$HOME/.spack-ci/view/bin:$PATH 
          cd ${{ github.workspace }}/run/INPUT
          mv ${{ github.workspace }}/noahmp_data/INPUT_ex/* .
          ln -sf grid_spec.nc C96_mosaic.nc
          cd ${{ github.workspace }}/run
          cp ${{ github.workspace }}/driver/scripts/datm* .
          cp ${{ github.workspace }}/driver/scripts/nuopc.configure .
          cp ${{ github.workspace }}/noahmp_data/fd.yaml .
          cp ${{ github.workspace }}/noahmp_data/input.nml .
          
      # run application
      - name: Run Application
        run: |
          export PATH=$HOME/.spack-ci/view/bin:$PATH
          cd ${{ github.workspace }}/run
          mpirun --oversubscribe -np 6 --allow-run-as-root ${{ env.INSTALL_DIR }}/bin/driver

      # calculate hashes
      - name: Calculate Hashes of Output Files
        run: |
          cd ${{ github.workspace }}/run
          lst=`ls -al comp.test.lnd.out.*.nc | awk '{print $9}'`
          for i in $lst; do
            md5sum $i >> output_hash.txt
          done
          echo "before"
          cat output_hash.txt
          # just for testing baseline check, manupilate the results to check false condition
          echo "after"
          cat output_hash.txt | awk '{print $1"A  "$2}' >& tmp.txt
          mv tmp.txt output_hash.txt
          cat output_hash.txt

      # restore baseline hash file from cache
      - name: Restore Baseline Hash File From Cache
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/run/output_hash_baseline.txt
          key: baseline-${{ hashFiles('output_hash_baseline.txt') }}
          restore-keys: |
            baseline-

      # compare with the baseline
      - name: Compare with Baseline
        id: compare-baseline 
        run: |
          cd ${{ github.workspace }}/run
          # compare against the baseline
          if test -f "output_hash_baseline.txt"; then
            echo "Baseline:"
            cat output_hash_baseline.txt
            echo "Current Run:"
            cat output_hash.txt
            echo "::set-output name=CHECK_RESULT::$(cmp --silent output_hash_baseline.txt output_hash.txt && echo 'true' || echo 'false' )"
            #echo "::set-output name=CREATE_BASELINE::$(echo 'false')"
          # there is no baseline, just copy current one ad baseline, will be cached later  
          else
            cp output_hash.txt output_hash_baseline.txt
            echo "::set-output name=CHECK_RESULT::$(echo 'true')"
            #echo "::set-output name=CREATE_BASELINE::$(echo 'true')"
          fi

      - name: Debug
        run: |
          echo ${{ steps.compare-baseline.outputs.CHECK_RESULT }}
          
      # Force to fail if the results are not matched with the baseline
      - name: Result of Baseline Check
        if: steps.compare-baseline.outputs.CHECK_RESULT == 'false'
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('The results do not match with the baseline!')
